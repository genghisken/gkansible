## RUN THIS PLAYBOOK WITH
## > ansible-playbook setup-mariadb-galera.yml
---

# JUST GATHERING FACTS
- hosts: cluster_control,frontend_db1,backend_db1,backend_db2
  become: true

- hosts: cluster_control,frontend_db1,backend_db1,backend_db2
  roles:
    - gkansible.gkservercollection.basic_packages

# MAKE SURE python3-mysqldb IS INSTALLED OR CLUSTERCONTROL FAILS TO INSTALL
- hosts: cluster_control
  become: yes
  tasks:
  - name: "Install python3-mysqldb"
    apt: 
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - python3-mysqldb

- hosts: cluster_control
  become: yes
  roles:
    - role: gkansible.gkservercollection.severalnines_clustercontrol
  vars:
    runtag: "controller"
    vaultsettings: "{{ lookup('hashi_vault', 'secret=secret/lasair/settings', errors='warn') | default('undefined', true) }}"
    localsettings: "{{ lookup('template', 'localsettings.yml', errors='warn')|from_yaml | default('undefined', true) }}"
    settings: "{% if vaultsettings == 'undefined' %}{{ localsettings }}{% else %}{{ vaultsettings }}{% endif %}"

    mysql_root_password: "{{ settings.master_db_root_password }}"
    cmon_mysql_password: "{{ settings.master_db_root_password }}"
    cc_admin:
      - set: true
        email: "k.w.smith@qub.ac.uk"
        password: "{{ settings.master_db_root_password }}"
    cc_license:
      - set: false


# 2022-02-28 KWS Added the following lines to force trigger the passwordless setup
- hosts: backend_db1,backend_db2,frontend_db1
  become: true
  roles:
    - { role: gkansible.gkservercollection.severalnines_clustercontrol, tags: dbnodes }
  vars:
    runtag: "dbnodes"
    clustercontrol_ip_address: "{{ hostvars[groups['cluster_control'][0]]['ansible_all_ipv4_addresses'][0] }}"
    remote_login_user: "root"
    remote_login_user_home: "/root"
    ssh_keyfile: "{{ remote_login_user_home }}/.ssh/id_rsa"
    ssh_user: "{{ remote_login_user }}"


- hosts: cluster_control
  become: yes
  become_user: root
  roles:
    - role: gkansible.gkservercollection.severalnines_clustercontrol
      tags: "deploy-database"
  vars:
    runtag: "deploy-database"
    vaultsettings: "{{ lookup('hashi_vault', 'secret=secret/lasair/settings', errors='warn') | default('undefined', true) }}"
    localsettings: "{{ lookup('template', 'localsettings.yml', errors='warn')|from_yaml | default('undefined', true) }}"
    settings: "{% if vaultsettings == 'undefined' %}{{ localsettings }}{% else %}{{ vaultsettings }}{% endif %}"
    mysql_root_password: "{{ settings.master_db_root_password }}"
    remote_login_user: "root"
    remote_login_user_home: "/root"
    # 2022-02-23 KWS Added clustercontrol_ip_address
    clustercontrol_ip_address: "{{ hostvars[groups['cluster_control'][0]]['ansible_all_ipv4_addresses'][0] }}"

    cc_cluster:
      # minimal create new galera
      - deployment: true
        operation: "create"
        cluster_type: "galera"
        cluster_name: "galera_cluster"
        mysql_cnf_template: "my.cnf.mdb10x-galera"
        mysql_datadir: "/var/lib/mysql"
        mysql_root_password: "{{ settings.master_db_root_password }}"
        mysql_hostnames:
          - "{{ hostvars[groups['backend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
          - "{{ hostvars[groups['backend_db2'][0]]['ansible_all_ipv4_addresses'][0] }}"
          - "{{ hostvars[groups['frontend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
        mysql_password: "{{ settings.master_db_root_password }}"
        cmon_mysql_password: "{{ settings.master_db_root_password }}"
        mysql_port: 3306
        mysql_version: "10.4"
        ssh_keyfile: "{{ remote_login_user_home }}/.ssh/id_rsa"
        ssh_user: "{{ remote_login_user }}"
        sudo_password: ""
        vendor: "mariadb"
        nodes: 
            - hostname: "{{ hostvars[groups['backend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_data: "{{ hostvars[groups['backend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_internal: ""
              port: "3306"
            - hostname: "{{ hostvars[groups['backend_db2'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_data: "{{ hostvars[groups['backend_db2'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_internal: ""
              port: "3306"
            - hostname: "{{ hostvars[groups['frontend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_data: "{{ hostvars[groups['frontend_db1'][0]]['ansible_all_ipv4_addresses'][0] }}"
              hostname_internal: ""
              port: "3306"


- hosts: backend_db1,backend_db2,frontend_db1
  become: true
  become_user: root
  # 2022-02-14 KWS Added the following role so we can refer to the template implicitly instead of
  #                using an absolute path.
  vars:
    runtag: "credential-templates"
    vaultsettings: "{{ lookup('hashi_vault', 'secret=secret/lasair/settings', errors='warn') | default('undefined', true) }}"
    localsettings: "{{ lookup('template', 'localsettings.yml', errors='warn')|from_yaml | default('undefined', true) }}"
    settings: "{% if vaultsettings == 'undefined' %}{{ localsettings }}{% else %}{{ vaultsettings }}{% endif %}"
    mysql_root_username: root
    mysql_root_password: "{{ settings.master_db_root_password }}"
  roles:
    - gkansible.gkservercollection.severalnines_clustercontrol


- hosts: cluster_control
  tasks:
   - name: Pause to let clustercontrol build the databases.
     pause:
       seconds: 300


- hosts: backend_db1
  become: true
  become_user: root
  tasks: 
    - name: Add MaxScale MySQL User on Cluster
      vars:
        vaultsettings: "{{ lookup('hashi_vault', 'secret=secret/lasair/settings', errors='warn') | default('undefined', true) }}"
        localsettings: "{{ lookup('template', 'localsettings.yml', errors='warn')|from_yaml | default('undefined', true) }}"
        settings: "{% if vaultsettings == 'undefined' %}{{ localsettings }}{% else %}{{ vaultsettings }}{% endif %}"
        password: "{{ settings.master_db_root_password }}"
        ip: "{{ hostvars[groups['cluster_control'][0]]['ansible_all_ipv4_addresses'][0] }}"
        mariadb_redhat_socket: '/var/lib/mysql/mysql.sock'
        mariadb_ubuntu_socket: '/var/run/mysqld/mysql.sock'

      community.mysql.mysql_query:
        query:
          - CREATE USER IF NOT EXISTS 'maxscale'@'{{ ip }}' IDENTIFIED BY "{{ password }}"
          - GRANT SELECT ON mysql.user TO 'maxscale'@'{{ ip }}';
          - GRANT SELECT ON mysql.db TO 'maxscale'@'{{ ip }}';
          - GRANT SELECT ON mysql.tables_priv TO 'maxscale'@'{{ ip }}';
          - GRANT SELECT ON mysql.columns_priv TO 'maxscale'@'{{ ip }}';
          - GRANT SELECT ON mysql.proxies_priv TO 'maxscale'@'{{ ip }}';
          - GRANT SELECT ON mysql.roles_mapping TO 'maxscale'@'{{ ip }}';
          - GRANT SHOW DATABASES ON *.* TO 'maxscale'@'{{ ip }}';
        login_user: root
        login_password: "{{ password }}"
        login_unix_socket: '{% if ansible_os_family == "Debian" %}{{ mariadb_ubuntu_socket }}{% else %}{{ mysql_redhat_socket }}{% endif %}'
        single_transaction: yes

# MAKE LOWERCASE TABLES FOR EACH SERVER IN THE CLUSTER


- hosts: backend_db1,backend_db2,frontend_db1
  become: true
  tasks:
    - name: Request lowercase tables names on all mysql servers
      ini_file:
        path: /etc/mysql/my.cnf
        section: MYSQLD
        option: lower_case_table_names
        value: "1"
        backup: no
    - name: Request lowercase tables names on all mysql servers
      ini_file:
        path: /etc/mysql/my.cnf
        section: MYSQLD
        option: log_bin_trust_function_creators
        value: "1"
        backup: no
    - name: Increase open file limit
      ini_file:
        path: /etc/systemd/system/mariadb.service.d/override.conf
        section: Service
        option: LimitNOFILE
        value: "infinity"
        backup: no

- hosts: cluster_control
  become: true
  vars:
    maxscale_deb_url: https://dlm.mariadb.com/1961572/MaxScale/2.5.18/packages/ubuntu/focal/x86_64/maxscale-2.5.18-1.ubuntu.focal.x86_64.deb
  roles: 
    - gkansible.gkservercollection.maxscale

- hosts: cluster_control
  become: true
  # 2022-02-14 KWS Added the following role so we can refer to the template implicitly instead of
  #                using an absolute path.
  vars:
    runtag: "credential-templates"
  roles: 
    - gkansible.gkservercollection.maxscale


- hosts: cluster_control
  become: true
  # 2022-02-14 KWS Added the following role so we can refer to the template implicitly instead of
  #                using an absolute path.
  tasks: 
    - name: maxscale restart
      service:
        name: maxscale
        state: restarted

